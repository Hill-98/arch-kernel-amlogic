# Maintainer: Zhong Lufan <lufanzhong@gmail.com>

# shellcheck shell=bash
# shellcheck disable=SC2034

pkgbase=linux-amlogic
pkgver=5.10.69
pkgrel=1
url="https://www.kernel.org/"
arch=('aarch64')
license=('GPL2')
makedepends=(xmlto docbook-xsl kmod inetutils bc)
options=('!strip')
_srcname=linux-$pkgver
source=(
    "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    0001-revert-arm64-get-rid-of-TEXT_OFFSET.patch
    0002-make-proc-cpuinfo-consistent-on-arm64-and-arm.patch
    0003-gcc-plugins-modern-gcc-plugin-infrastructure-requres.patch
    0004-ZEN-Add-sysctl-and-CONFIG-to-disallow-unprivileged-C.patch
    90-linux.hook
    91-linux.hook
    config
    linux.preset
    meson-gxl-s905d-phicomm-n1.dts
)
sha256sums=('232f9ec53bccca768868831b7cc286f7d8bbbac9f481bbac1495700231a20cca'
            '35cdf5543d27d133aae0aecd548a20e561b10e0137ae3cf615bd2a2b7a2723e8'
            '831ac3a6ea8568c58e491c6f57e3b3c8074e8b9ec530b65dc755cda69d8e3079'
            'bb935ad2467637966185b88d18a3f9be2f37d3acdc71ed361eae326ca898d6fc'
            '96a72e1652314215da7140956c3abcf495cafd00811eda3cf4ce03ec5f791f1e'
            'bdfd19ad6d2febc13a24d29f3cfca60f8c72a9eb9cf0ae0b98d1c34b6cb86f92'
            '9780de95d125def997bd46e3bcbcd452f95adeafbbf7f2b3059ea6af8d2b94f3'
            'c8930806c791fd00f348671fc01e3d4005cf196e9e332a30902eb1d52cdcb74c'
            '30ec9319e70af6ec38ed980b84db3f5da73b310f4c9e3c9b1883fda9f1d0d9f2'
            '53111256f1a62ebfb4dc45fad6ef95551202098a467210091152864017487885')

prepare() {
  cd $_srcname

  echo "Apply custom Phicomm N1 dts..."
  cp -f -v ../meson-gxl-s905d-phicomm-n1.dts arch/arm64/boot/dts/amlogic/meson-gxl-s905d-phicomm-n1.dts

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  echo "Setting config..."
  cp ../config .config
  make olddefconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  make DTC_FLAGS="-@" all
}

_package() {
  pkgdesc="The AMLOGIC Linux Kernel and modules"
  depends=(coreutils kmod mkinitcpio uboot-tools)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(WIREGUARD-MODULE)
  install=${pkgname}.install

  cd $_srcname
  local kernver modulesdir
  kernver="$(<version)"
  modulesdir="$pkgdir/usr/lib/modules/$kernver"

  # sed expression
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${kernver}|g
  "

  echo "Installing boot image..."
  zcat "$(make -s image_name)" | install -Dm644 /dev/stdin "$pkgdir/boot/vmlinux-$pkgbase"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  echo "Installing dtbs..."
  install -Dt "$pkgdir/boot/$pkgbase-dtbs" -m644 arch/arm64/boot/dts/amlogic/*.dtb

  # remove build and source links
  rm "$modulesdir"/{source,build}

  sed "$_subst" ../linux.preset |
    install -Dm644 /dev/stdin "$pkgdir/etc/mkinitcpio.d/$pkgbase.preset"
  sed "$_subst" ../90-linux.hook |
    install -Dm644 /dev/stdin "$pkgdir/usr/share/libalpm/hooks/90-$pkgbase.hook"
  sed "$_subst" ../91-linux.hook |
    install -Dm644 /dev/stdin "$pkgdir/usr/share/libalpm/hooks/91-$pkgbase.hook"
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the AMLOGIC Linux kernel"

  cd $_srcname
  local builddir
  builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/arm64" -m644 arch/arm64/Makefile
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/arm64" -a arch/arm64/include
  install -Dt "$builddir/arch/arm64/kernel" -m644 arch/arm64/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */arm64/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file strip_bin
  strip_bin=$(command -v aarch64-linux-gnu-strip || command -v strip)
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        $strip_bin -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        $strip_bin -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        $strip_bin -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        $strip_bin -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  $strip_bin -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done
